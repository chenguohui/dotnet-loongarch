name: Build SDK main - Schedule

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  build-dotnet:
    runs-on: self-hosted
    env:
      CI: ""
      LANG: en_US.UTF-8

    permissions:
      contents: write

    steps:

    - name: Prepare sdk and pkg
      run: |
        # clean workspace
        rm -rf ~/sdk ~/pkg
        mkdir -p ~/sdk ~/pkg

        # unzip tarballs
        cd ~/assets
        sdk_name=$(ls -rt ~/assets/dotnet-sdk-10* | tail -1)
        artifacts_name=$(ls -rt ~/assets/Private.SourceBuilt.Artifacts.*.tar.gz | tail -1)
        # sdk_name=~/assets/dotnet-sdk-10.0.100-preview.7.25380.108-linux-loongarch64.tar.gz
        # artifacts_name=~/assets/Private.SourceBuilt.Artifacts.10.0.100-preview.7.linux-loongarch64.tar.gz

        tar xf $sdk_name -C ~/sdk
        tar xf $artifacts_name -C ~/pkg

        ~/sdk/dotnet --version

        ls -R ~/pkg

    - name: Prepare repository
      run: |
        cd ~/vmr

        # clean repo
        git clean -dfx
        git checkout -- .

        # checkout main
        git checkout main

        # fast-forward main
        git pull origin main

        git log -3

    - name: Apply patches
      run: |

        cd ~/vmr

        # 1. Calc and set sdk/runtime/aspnetcore version
        SDK_FEATURE_BAND=10.0.100
        RUNTIME_BAND=10.0.0
        VERSION_SUFFIX=rc.1
        VERSION_LABEL=$( date +"%y %m %d" | awk '{print $1 * 1000 + $2 * 50 + $3}' )
        VERSION_ITER=$(( $( git log --since=midnight --oneline | wc -l ) + 1 ))

        SDK_VERSION=$SDK_FEATURE_BAND-$VERSION_SUFFIX.$VERSION_LABEL.$VERSION_ITER
        RUNTIME_VERSION=$RUNTIME_BAND-$VERSION_SUFFIX.$VERSION_LABEL.$VERSION_ITER

        echo $SDK_VERSION

        # save SDK_VERSION to GITHUB_ENV
        echo "SDK_VERSION=$SDK_VERSION" >> $GITHUB_ENV

        sed -i "/<\/PropertyGroup>/ i\    <BuildArgs>\$(BuildArgs) /p:Version=$SDK_VERSION</BuildArgs>" repo-projects/sdk.proj
        sed -i "/<\/PropertyGroup>/ i\    <BuildArgs>\$(BuildArgs) /p:Version=$RUNTIME_VERSION</BuildArgs>" repo-projects/runtime.proj
        sed -i "/<\/PropertyGroup>/ i\    <BuildArgs>\$(BuildArgs) /p:Version=$RUNTIME_VERSION</BuildArgs>" repo-projects/aspnetcore.proj


        # 2. Add loongarch64 IO.ports project files
        cp -v src/runtime/src/libraries/System.IO.Ports/pkg/runtime.linux-x64.runtime.native.System.IO.Ports.proj src/runtime/src/libraries/System.IO.Ports/pkg/runtime.linux-loongarch64.runtime.native.System.IO.Ports.proj
        cp -v src/runtime/src/libraries/System.IO.Ports/pkg/runtime.linux-x64.runtime.native.System.IO.Ports.proj src/runtime/src/libraries/System.IO.Ports/pkg/runtime.linux-musl-loongarch64.runtime.native.System.IO.Ports.proj

        # 3. Set runtime KeepNativeSymbols=false
        sed -i "/<KeepNativeSymbols/ s/>true</>false</" src/runtime/Directory.Build.props

        # 4. Set runtime NativeAotSupported=fales for not stable enough at present
        # sed -i "/<NativeAotSupported/ s/>true</>false</" src/runtime/eng/Subsets.props

        # 5. Fix possible error caused by /restore
        sed -i "/\/restore/ s#/restore#-restore#g" src/fsharp/eng/build.sh

        # 6. Remove $(NetCoreAppCurrent)-windows
        sed -i 's#$(NetCoreAppCurrent)-windows;##' src/runtime/src/libraries/System.Transactions.Local/src/System.Transactions.Local.csproj

        # 7. Set PublishReadyToRun=false
        sed -i '/<PublishReadyToRun/ s/$(EnablePublishReadyToRun)/false/' src/fsharp/src/fsc/fscProject/fsc.fsproj

        # 8. Fix possible error CS0221
        sed -i "s/0x80020139/0x80020139L/" src/diagnostics/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsClient/EventPipeSession.cs

        git status

        git diff


    - name: Build ${{ env.SDK_VERSION }}
      run: |
      
        cd ~/vmr
        ./build.sh  -c Release -sb --clean-while-building --with-packages ~/pkg --with-sdk ~/sdk -- -p:PortableBuild=true

    - name: List assets directory
      run: |

        ls -lh ~/vmr/artifacts
        ls -lh ~/vmr/artifacts/assets/Release/Private.SourceBuilt.Artifacts.*.tar.gz
        ls -lh ~/vmr/artifacts/assets/Release/Sdk/*/dotnet-sdk-*.tar.gz
        ls -lh ~/vmr/artifacts/assets/Release/Runtime/*/dotnet-runtime-*.tar.gz
        ls -lh ~/vmr/artifacts/assets/Release/aspnetcore/Runtime/*/aspnetcore-runtime-*.tar.gz
        ls -lh ~/vmr/artifacts/packages/Release/Shipping/runtime/*linux-loongarch64*.nupkg
        ls -lh ~/vmr/artifacts/packages/Release/Shipping/aspnetcore/*linux-loongarch64*.nupkg

        cp -v ~/vmr/artifacts/assets/Release/Private.SourceBuilt.Artifacts.*.tar.gz ~/assets/
        cp -v ~/vmr/artifacts/assets/Release/Sdk/*/dotnet-sdk-*.tar.gz ~/assets/

        SDK_FILE=$(basename ~/vmr/artifacts/assets/Release/Sdk/*/dotnet-sdk-*.tar.gz)
        ARTIFACTS=$(basename ~/vmr/artifacts/assets/Release/Private.SourceBuilt.Artifacts.*.tar.gz)

        echo "SDK_FILE=$SDK_FILE" >> $GITHUB_ENV
        echo "ARTIFACTS=$ARTIFACTS" >> $GITHUB_ENV

    - name: Upload ${{ env.SDK_FILE }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SDK_FILE }}
        path: |
          ~/vmr/artifacts/assets/Release/Sdk/*/dotnet-sdk-*.tar.gz
        compression-level: 0  # all artifacts are already compressed

    - name: Upload ${{ env.ARTIFACTS }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACTS }}
        path: |
          ~/vmr/artifacts/assets/Release/Private.SourceBuilt.Artifacts.*.tar.gz
        compression-level: 0  # all artifacts are already compressed
